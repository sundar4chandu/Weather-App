{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/forecast/forecast.component.html","./src/app/forecast/forecast.component.ts","./src/app/current/current.component.html","./src/app/current/current.component.ts","./src/app/services/weather.service.ts","./src/app/app-routing.module.ts","./src/app/services/location.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'Weather-App';\n}\n","<div class=\"app-content bg-aqua text-white\">\n    <app-header></app-header>\n    <router-outlet></router-outlet>\n</div>\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './header/header.component';\nimport { CurrentComponent } from './current/current.component';\nimport { ForecastComponent } from './forecast/forecast.component';\nimport { DatePipe } from '@angular/common';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    CurrentComponent,\n    ForecastComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule\n  ],\n  providers: [DatePipe],\n  bootstrap: [AppComponent,\n    HeaderComponent\n  ]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<nav class=\"header navbar navbar-expand-lg\">\n    <div class=\"container-fluid\">\n      <a class=\"navbar-brand mb-0 h1\" href=\"#\">Weather App</a>\n      <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" aria-current=\"page\" [routerLink]=\"['/current']\" routerLinkActive=\"active\">Current</a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" [routerLink]=\"['/forecast']\" routerLinkActive=\"active\" >Forecast</a>\n          </li>\n        </ul>\n      </div>\n    </div> \n  </nav>","<div class=\"forecast-container m-2 p-2\">\n    <div class=\"loading text-center\" *ngIf=\"!weatherForecast\">\n        <div class=\"spinner-border m-auto\" role=\"status\"></div>\n        <p class=\"mx-auto\">Loading...</p>\n    </div>\n    <div class=\"row p-0\">\n        <div class=\"col-3 selected\" *ngIf=\"weatherForecast && selectedWeather\">\n            <div class=\"card bg-transparent current\">\n                <div class=\"mx-auto\">\n                    <img class=\"card-img\" [src]=\"iconUrl + selectedWeather.weather[0].icon + '@2x.png'\" alt=\"\">\n                    <div>{{selectedWeather.weather[0].description | uppercase}}</div>\n                    <h1 class=\"card-title\">{{selectedWeather.main.temp}}&deg; <small>F</small></h1>\n                    <p class=\"card-text\">{{selectedWeather.dt * 1000 | date : 'MMM d, h:mm a'}} </p>\n                    <p>{{weatherForecast.city.name}}, {{weatherForecast.city.country}}</p>\n                    <p><small>Feels Like : </small>{{selectedWeather.main.feels_like}} &deg; <small>F</small></p>\n                    <p><small>Wind : </small>{{selectedWeather.wind.speed}} m/h </p>\n                    <p><small>Humidity : </small>{{selectedWeather.main.humidity}} %</p>\n                </div>\n            </div>\n        </div>\n        <div class=\"forecast col-9 table-responsive\">\n                <table class=\"table text-light forecast-table mb-0\" *ngIf=\"forecast.length\">\n                    <thead>\n                        <tr>\n                            <th class=\"text-center\" scope=\"col\">Date</th>\n                            <th class=\"time text-center\" scope=\"col\" *ngFor=\"let item of forecast[1]\">\n                                {{item.dt * 1000 | date : 'shortTime'}}\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr *ngFor=\"let list of forecast; index as i\">\n                            <td class=\"date text-center p-1\" scope=\"row\">\n                                {{list[list.length - 1].dt * 1000 | date: 'MMM d'}}\n                            </td>\n                            <td class=\"text-center p-1\" *ngFor=\"let item of forecast[i]\"\n                                [ngClass]=\"{active: selectedWeather == item, temp: item }\"\n                                (click)=\"item? selectWeather(item) : ''\">\n                                {{item.main? item.main.temp + '&deg;' : ''}} <br>\n                                <img [src]=\"iconUrl + item.weather[0].icon + '.png'\" alt=\"\" *ngIf=\"item.weather\">\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n        </div>\n    </div>\n</div>","import { DatePipe } from '@angular/common';\nimport { Component, OnInit } from '@angular/core';\nimport { LocationService } from '../services/location.service';\nimport { WeatherService } from '../services/weather.service';\nimport { ICurrent } from '../shared/i-current';\nimport { IForecast } from '../shared/i-forecast';\n\n@Component({\n  selector: 'app-forecast',\n  templateUrl: './forecast.component.html',\n  styleUrls: ['./forecast.component.scss']\n})\nexport class ForecastComponent implements OnInit {\n\n\n  public weatherForecast: any;\n  public errorMsg: string = '';\n  public forecast: any = [];\n  public iconUrl = 'http://openweathermap.org/img/wn/';\n  public selectedWeather: any;\n  public tableView = true;\n\n  constructor(private locationService: LocationService,\n              private weatherService: WeatherService,\n              private dateFilter: DatePipe\n  ) {\n  }\n\n  ngOnInit() {\n    this.getWeatherForecast();\n  }\n\n  getWeatherForecast() {\n    this.locationService.getCurrentPosition().then(location => {\n      this.weatherService.getweatherForecast(location.lat, location.lng).subscribe((res: IForecast) => {\n        this.weatherForecast = res;\n        this.setTableData(res.list);\n      });\n    }).catch(() => {\n      const alertMsg = 'Please allow location access.';\n      window.alert(alertMsg);\n      this.errorMsg = 'User location is currently unavailable. Please turn on location services.'\n    });\n  }\n\n  setTableData(data: ICurrent[]) {\n    let dates: any[] = [];\n    data.forEach(element => {\n      const date = this.dateFilter.transform(element.dt * 1000, 'MMM d');\n      if (dates.indexOf(date) !== -1) {\n        this.forecast[dates.indexOf(date)].push(element);\n      } else {\n        dates.push(date);\n        this.forecast[dates.indexOf(date)] = [];\n        this.forecast[dates.indexOf(date)].push(element);\n      }\n    });\n    console.log(data);\n    if(this.forecast[this.forecast.length - 1].length !== 8){\n      for (let i = 0; i < this.forecast[this.forecast.length - 1].length; i++) {\n        this.forecast[0].unshift('');\n      }\n    }\n    console.log(this.forecast);\n    this.selectedWeather = this.weatherForecast.list[0];\n  }\n\n  selectWeather(item: ICurrent) {\n    this.selectedWeather = item;\n  }\n\n  toggleView() {\n    this.tableView = !this.tableView;\n  }\n}\n","<div class=\"container p-0 text-center\">\n    <div class=\"row\">\n        <div class=\"col-sm\">\n            <div class=\"card-header text-center\">\n                Current Weather\n            </div>\n            <div class=\"loading m-2\" *ngIf=\"!weather\">\n                <div class=\"spinner-border\" role=\"status\"></div>\n                <p>Loading...</p>\n            </div>\n            <img *ngIf=\"weather\" [src]=\"weather.weather[0].icon\" alt=\"\">\n            <div class=\"card border-0 m-2 bg-transparent\" *ngIf=\"weather\">\n                <div>{{weather.weather[0].description | uppercase}}</div>\n                <h1 class=\"card-title\">{{weather.main.temp}}&deg; <small>F</small></h1>\n                <p class=\"card-text\">{{weather.dt * 1000 | date : 'MMM d, h:mm a'}} </p>\n                <p>{{weather.name}}, {{weather.sys.country}}</p>\n                <p><small>Feels Like : </small>{{weather.main.feels_like}} &deg; <small>F</small></p>\n                <p><small>Wind : </small>{{weather.wind.speed}} m/h </p>\n                <p><small>Humidity : </small>{{weather.main.humidity}} %</p>\n                <div class=\"card-footer border-0\">\n                    <div class=\"float-start\">\n                        <span>\n                            <p>Sunrise</p>\n                            <img src=\"assets/sunrise.svg\" alt=\"\">\n                            <p>{{weather.sys.sunrise * 1000 | date: 'h:mm a'}}</p>\n                        </span>\n                    </div>\n                    <div class=\"float-end\">\n                        <span>\n                            <p>Sunset</p>\n                            <img src=\"assets/sunset.svg\" alt=\"\">\n                            <p>{{weather.sys.sunset * 1000 | date: 'h:mm a'}}</p>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { LocationService } from '../services/location.service';\nimport { WeatherService } from '../services/weather.service';\nimport { ICurrent } from '../shared/i-current';\n\n@Component({\n  selector: 'app-current',\n  templateUrl: './current.component.html',\n  styleUrls: ['./current.component.scss']\n})\nexport class CurrentComponent implements OnInit {\n\n  public location: string = '';\n  public weather: any;\n  public imgSrc: string = '';\n  public wind = {\n    units: 'm'\n  }\n  public errorMsg = '';\n  constructor(private weatherService: WeatherService,\n    private locationService: LocationService\n  ) {\n  }\n\n  ngOnInit() {\n    this.getCurrentTemp();\n  }\n\n  getCurrentTemp() {\n    this.locationService.getCurrentPosition().then(location => {\n      this.weatherService.getCurrentTemp(location.lat, location.lng).subscribe((res: ICurrent) => {\n        this.weather = res;\n        this.weather.weather[0].icon = 'http://openweathermap.org/img/wn/' + res.weather[0].icon + '@2x.png';\n      });\n    }).catch(err => {\n      const alertMsg = 'Please allow location access.';\n      window.alert(alertMsg);\n      this.errorMsg = 'User location is currently unavailable. Please turn on location services.';\n    });\n  }\n\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ICurrent } from '../shared/i-current';\nimport { IForecast } from '../shared/i-forecast';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  private apiKey = '485aadc24a72037f4b275f596b02d236';\n  private currentTempUrl = 'https://api.openweathermap.org/data/2.5/weather?';\n  private forecastUrl = 'https://api.openweathermap.org/data/2.5/forecast?';\n\n  private units = 'imperial';\n\n  constructor(private http: HttpClient) { }\n\n  getCurrentTemp(lat: string, lon: string) {\n    let params = 'units=' + this.units +\n      '&lat=' + lat +\n      '&lon=' + lon +\n      '&APPID=' + this.apiKey;\n    return this.http.get<ICurrent>(this.currentTempUrl + params);\n  }\n\n  getweatherForecast(lat:string, lon:string) {\n    let params = 'units=' + this.units +\n      '&lat=' + lat +\n      '&lon=' + lon +\n      '&APPID=' + this.apiKey;\n    return this.http.get<IForecast>(this.forecastUrl + params);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CurrentComponent } from './current/current.component';\nimport { ForecastComponent } from './forecast/forecast.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/current', pathMatch: 'full' },\n  {path: 'current', component: CurrentComponent},\n  {path: 'forecast', component: ForecastComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LocationService {\n\n  constructor() { }\n\n  getCurrentPosition(): Promise<any> {\n    console.log('calling location service')\n    return new Promise((resolve, reject) => {\n      navigator.geolocation.getCurrentPosition(res => {\n        console.log(res)\n        resolve({ lng: res.coords.longitude, lat: res.coords.latitude });\n      },err => {\n        reject(err);\n      });\n    });\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}